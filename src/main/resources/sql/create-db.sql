CREATE TABLE AUDITORIUM (
	ID                   integer GENERATED ALWAYS AS IDENTITY  NOT NULL,
	NAME                 varchar(100)   ,
	NUMBER_OF_SEATS      integer   ,
	CONSTRAINT PK_AUDITORIUM PRIMARY KEY ( ID )
 );

CREATE TABLE EM_USER ( 
	ID                   integer GENERATED ALWAYS AS IDENTITY  NOT NULL,
	NAME                 varchar(100)   ,
	BIRTH_DATE           timestamp   ,
	EMAIL                varchar(100)   ,
	EM_ROLES             varchar(200)   ,
	EM_PASSWORD          varchar(100)   ,
    MONEY                double         ,
	CONSTRAINT PK_EM_USER PRIMARY KEY ( ID )
 );

CREATE TABLE EVENT_RATING ( 
	ID                   integer GENERATED ALWAYS AS IDENTITY  NOT NULL,
	RATING_NAME          varchar(100)   ,
	CONSTRAINT PK_EVENT_RATING PRIMARY KEY ( ID )
 );

CREATE TABLE STRATEGY ( 
	ID                   integer GENERATED ALWAYS AS IDENTITY  NOT NULL,
	CLASS_NAME           varchar(200)   ,
	CONSTRAINT PK_STRATEGY PRIMARY KEY ( ID )
 );

CREATE TABLE VIP_SEAT ( 
	ID                   integer GENERATED ALWAYS AS IDENTITY  NOT NULL,
	AUDITORIUM_ID        integer   ,
	SEAT_NUMBER          integer   ,
	CONSTRAINT PK_VIP_SEAT PRIMARY KEY ( ID )
 );

CREATE INDEX PK_VIP_SEAT_0 ON VIP_SEAT ( AUDITORIUM_ID );

CREATE TABLE DISCOUNT_STATISTIC ( 
	ID                   integer GENERATED ALWAYS AS IDENTITY  NOT NULL,
	STRATEGY_ID          integer   ,
	TOTAL_USAGES         integer  DEFAULT 0 ,
	CONSTRAINT PK_DISCOUNT_STATISTIC PRIMARY KEY ( ID )
 );

CREATE INDEX IDX_DISCOUNT_STATISTIC ON DISCOUNT_STATISTIC ( STRATEGY_ID );

CREATE TABLE DISCOUNT_TO_USER ( 
	ID                   integer GENERATED ALWAYS AS IDENTITY  NOT NULL,
	USER_ID              integer   ,
	STATISTIC_ID         integer   ,
	USAGES               integer   ,
	CONSTRAINT PK_DISCOUNT_TO_USER PRIMARY KEY ( ID )
 );

CREATE INDEX IDX_DISCOUNT_TO_USER ON DISCOUNT_TO_USER ( USER_ID );

CREATE INDEX IDX_DISCOUNT_TO_USER_0 ON DISCOUNT_TO_USER ( STATISTIC_ID );

CREATE TABLE EVENT ( 
	ID                   integer GENERATED ALWAYS AS IDENTITY  NOT NULL,
	NAME                 varchar(100)   ,
	BASE_PRICE           double   ,
	RATING_ID            integer   ,
	CONSTRAINT PK_EVENT PRIMARY KEY ( ID )
 );

CREATE INDEX IDX_EVENT ON EVENT ( RATING_ID );

CREATE TABLE EVENT_STATISTIC ( 
	ID                   integer GENERATED ALWAYS AS IDENTITY  NOT NULL,
	EVENT_ID             integer   ,
	PRICE_REQUIRED       integer  DEFAULT 0 ,
	ACCESSED_BY_NAME     integer  DEFAULT 0 ,
	TICKETS_BOOKED       integer  DEFAULT 0 ,
	CONSTRAINT PK_EVENT_STATISTIC PRIMARY KEY ( ID )
 );

CREATE INDEX IDX_EVENT_STATISTIC ON EVENT_STATISTIC ( EVENT_ID );

CREATE TABLE OCCASION ( 
	ID                   integer GENERATED ALWAYS AS IDENTITY  NOT NULL,
	EVENT_ID             integer   ,
	AUDITORIUM_ID        integer   ,
    OCCASION_DATE        timestamp   ,
	CONSTRAINT PK_OCCASION PRIMARY KEY ( ID )
 );

CREATE INDEX IDX_OCCASION ON OCCASION ( AUDITORIUM_ID );

CREATE INDEX IDX_OCCASION_0 ON OCCASION ( EVENT_ID );

CREATE TABLE TICKET ( 
	ID                   integer GENERATED ALWAYS AS IDENTITY  NOT NULL,
	OCCASION_ID          integer   ,
	SEAT                 integer   ,
	USER_ID              integer   ,
	CONSTRAINT PK_TICKET PRIMARY KEY ( ID )
 );

 CREATE TABLE persistent_logins (
     username varchar(64) not null,
     series varchar(64) not null,
     token varchar(64) not null,
     last_used timestamp not null,
     PRIMARY KEY (series)
 );

CREATE INDEX IDX_TICKET ON TICKET ( OCCASION_ID );

CREATE INDEX IDX_TICKET_0 ON TICKET ( USER_ID );

ALTER TABLE DISCOUNT_STATISTIC ADD CONSTRAINT FK_DISCOUNT_STATISTIC FOREIGN KEY ( STRATEGY_ID ) REFERENCES STRATEGY( ID ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE DISCOUNT_TO_USER ADD CONSTRAINT FK_DISCOUNT_TO_USER FOREIGN KEY ( USER_ID ) REFERENCES EM_USER( ID ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE DISCOUNT_TO_USER ADD CONSTRAINT FK_DISCOUNT_TO_USER_0 FOREIGN KEY ( STATISTIC_ID ) REFERENCES DISCOUNT_STATISTIC( ID ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE EVENT ADD CONSTRAINT FK_EVENT FOREIGN KEY ( RATING_ID ) REFERENCES EVENT_RATING( ID ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE EVENT_STATISTIC ADD CONSTRAINT FK_EVENT_STATISTIC FOREIGN KEY ( EVENT_ID ) REFERENCES EVENT( ID ) ON DELETE CASCADE ON UPDATE NO ACTION;

ALTER TABLE OCCASION ADD CONSTRAINT FK_OCCASION FOREIGN KEY ( AUDITORIUM_ID ) REFERENCES AUDITORIUM( ID ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE OCCASION ADD CONSTRAINT FK_OCCASION_0 FOREIGN KEY ( EVENT_ID ) REFERENCES EVENT( ID ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE TICKET ADD CONSTRAINT FK_TICKET FOREIGN KEY ( OCCASION_ID ) REFERENCES OCCASION( ID ) ON DELETE CASCADE ON UPDATE NO ACTION;

ALTER TABLE TICKET ADD CONSTRAINT FK_TICKET_0 FOREIGN KEY ( USER_ID ) REFERENCES EM_USER( ID ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE VIP_SEAT ADD CONSTRAINT FK_VIP_SEAT FOREIGN KEY ( AUDITORIUM_ID ) REFERENCES AUDITORIUM( ID ) ON DELETE CASCADE ON UPDATE NO ACTION;

INSERT INTO EM_USER(NAME, EMAIL, BIRTH_DATE, EM_ROLES, EM_PASSWORD, MONEY) VALUES('Chuck Norris', 'admin@em.com', to_timestamp('23-APR-1960 06.11.52.000000000 PM','DD-MON-YYYY HH.MI.SS.FF AM'), 'ROLE_BOOKING_MANAGER', '$2a$04$XvyeKLqOUPMipFTf2gfPv./RQjrWyKRWmxPlkehwwhfKVnD8V9gxi', 500.0);
INSERT INTO EM_USER(NAME, EMAIL, BIRTH_DATE, EM_ROLES, EM_PASSWORD, MONEY) VALUES('John Doe', 'user@em.com', to_timestamp('22-SEP-1970 06.11.52.000000000 PM','DD-MON-YYYY HH.MI.SS.FF AM'), 'ROLE_REGISTERED_USER', '$2a$04$XvyeKLqOUPMipFTf2gfPv./RQjrWyKRWmxPlkehwwhfKVnD8V9gxi', 100.0);

